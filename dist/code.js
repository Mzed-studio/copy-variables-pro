(()=>{"use strict";var e=function(e,i,o,t){return new(o||(o=Promise))((function(s,a){function n(e){try{c(t.next(e))}catch(e){a(e)}}function l(e){try{c(t.throw(e))}catch(e){a(e)}}function c(e){var i;e.done?s(e.value):(i=e.value,i instanceof o?i:new o((function(e){e(i)}))).then(n,l)}c((t=t.apply(e,i||[])).next())}))};figma.showUI(__html__,{themeColors:!0,width:300,height:400}),figma.ui.onmessage=i=>e(void 0,void 0,void 0,(function*(){var e,o,t;if("get-collections"===i.type){const e=yield figma.variables.getLocalVariableCollectionsAsync();if(0===e.length)return void figma.ui.postMessage({type:"no-collections"});const i=e.map((e=>({id:e.id,name:e.name})));figma.ui.postMessage({type:"collections-list",data:i})}else if("check-saved-collection"===i.type){const i=null===(e=figma.currentUser)||void 0===e?void 0:e.id;if(!i)return void figma.ui.postMessage({type:"user-not-logged-in"});const o=yield figma.clientStorage.getAsync(`collection-${i}`);o?figma.ui.postMessage({type:"saved-collection-found",data:o}):figma.ui.postMessage({type:"no-saved-collection"})}else if("copy-collection"===i.type&&i.collectionId){const e=(yield figma.variables.getLocalVariableCollectionsAsync()).find((e=>e.id===i.collectionId));if(!e)return void figma.ui.postMessage({type:"no-collections"});const t=yield Promise.all(e.variableIds.map((e=>figma.variables.getVariableByIdAsync(e)))),s={id:e.id,name:e.name,modes:e.modes,variables:t.filter((e=>null!==e)).map((e=>({id:e.id,name:e.name,resolvedType:e.resolvedType,valuesByMode:Object.fromEntries(Object.entries(e.valuesByMode).map((([e,i])=>i&&"object"==typeof i&&"type"in i&&"VARIABLE_ALIAS"===i.type?[e,{type:"VARIABLE_ALIAS",id:i.id}]:[e,i]))),scopes:e.scopes||[]})))},a=null===(o=figma.currentUser)||void 0===o?void 0:o.id;if(!a)return void figma.ui.postMessage({type:"user-not-logged-in"});yield figma.clientStorage.setAsync(`collection-${a}`,s),figma.ui.postMessage({type:"collection-copied",data:s})}else if("paste-collection"===i.type){const e=null===(t=figma.currentUser)||void 0===t?void 0:t.id;if(!e)return void figma.ui.postMessage({type:"user-not-logged-in"});const i=yield figma.clientStorage.getAsync(`collection-${e}`);if(!i)return void figma.ui.postMessage({type:"no-copied-collection"});try{const o=figma.variables.createVariableCollection(i.name),t={};t[i.modes[0].modeId]=o.modes[0].modeId,i.modes.slice(1).forEach((e=>{const i=o.addMode(e.name);t[e.modeId]=i}));const s={};for(const e of i.variables){const i=figma.variables.createVariable(e.name,o,e.resolvedType);e.scopes&&(i.scopes=e.scopes),s[e.id]=i.id}for(const e of i.variables){const i=yield figma.variables.getVariableByIdAsync(s[e.id]);if(i)for(const[o,a]of Object.entries(e.valuesByMode)){const e=t[o];if(e)if(a&&"object"==typeof a&&"type"in a&&"VARIABLE_ALIAS"===a.type){const o=s[a.id];if(o){const t=yield figma.variables.getVariableByIdAsync(o);if(t){const o=figma.variables.createVariableAlias(t);i.setValueForMode(e,o)}}}else i.setValueForMode(e,a)}}yield figma.clientStorage.deleteAsync(`collection-${e}`),figma.ui.postMessage({type:"collection-pasted",name:i.name})}catch(e){if(e instanceof Error&&e.message.includes("Limited to 1 modes only"))return void figma.ui.postMessage({type:"paste-error",message:"This file only supports 1 mode. The collection was not pasted correctly."});throw e}}}))})();